<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.crabapples.test.dao.mybatis.UserMapperTest">
		<resultMap id="BaseResultMap" type="cn.crabapples.test.entity.SysUser">
				<id column="id" jdbcType="VARCHAR" property="id"/>
				<result column="age" jdbcType="INTEGER" property="age"/>
				<result column="name" jdbcType="VARCHAR" property="name"/>
				<result column="password" jdbcType="VARCHAR" property="password"/>
				<result column="status" jdbcType="BIT" property="status"/>
				<result column="username" jdbcType="VARCHAR" property="username"/>
				<result column="role" jdbcType="BIT" property="role"/>
				<result column="mail" jdbcType="VARCHAR" property="mail"/>
				<result column="last_modified_by" jdbcType="VARCHAR" property="lastModifiedBy"/>
				<result column="phone" jdbcType="VARCHAR" property="phone"/>
		</resultMap>
		<resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="cn.crabapples.test.entity.SysUser">
				<result column="roles_list" jdbcType="LONGVARCHAR" property="rolesList"/>
		</resultMap>
		<sql id="Example_Where_Clause">
			<where>
				<foreach collection="oredCriteria" item="criteria" separator="or">
					<if test="criteria.valid">
						<trim prefix="(" prefixOverrides="and" suffix=")">
							<foreach collection="criteria.criteria" item="criterion">
								<choose>
									<when test="criterion.noValue">
										and ${criterion.condition}
									</when>
									<when test="criterion.singleValue">
										and ${criterion.condition} #{criterion.value}
									</when>
									<when test="criterion.betweenValue">
										and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
									</when>
									<when test="criterion.listValue">
										and ${criterion.condition}
										<foreach close=")" collection="criterion.value" item="listItem" open="("
												 separator=",">
											#{listItem}
										</foreach>
									</when>
								</choose>
							</foreach>
						</trim>
					</if>
				</foreach>
			</where>
		</sql>
		<sql id="Base_Column_List">
				id
				, age, name, password, status, username, role, mail, last_modified_by, phone
		</sql>
		<sql id="Blob_Column_List">
				roles_list
		</sql>
		<select id="selectByExampleWithBLOBs" parameterType="cn.crabapples.test.entity.SysUserExample"
		        resultMap="ResultMapWithBLOBs">
				select
				<if test="distinct">
						distinct
				</if>
				'false' as QUERYID,
				<include refid="Base_Column_List"/>
				,
				<include refid="Blob_Column_List"/>
				from sys_user
				<if test="_parameter != null">
						<include refid="Example_Where_Clause"/>
				</if>
				<if test="orderByClause != null">
						order by ${orderByClause}
				</if>
		</select>
		<select id="selectByExample" parameterType="cn.crabapples.test.entity.SysUserExample" resultMap="BaseResultMap">
				select
				<if test="distinct">
						distinct
				</if>
				'false' as QUERYID,
				<include refid="Base_Column_List"/>
				from sys_user
				<if test="_parameter != null">
						<include refid="Example_Where_Clause"/>
				</if>
				<if test="orderByClause != null">
						order by ${orderByClause}
				</if>
		</select>
		<select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
				select
				<include refid="Base_Column_List"/>
				,
				<include refid="Blob_Column_List"/>
				from sys_user
				where id = #{id,jdbcType=VARCHAR}
		</select>
		<delete id="deleteByPrimaryKey" parameterType="java.lang.String">
				delete
				from sys_user
				where id = #{id,jdbcType=VARCHAR}
		</delete>

		<insert id="insert" parameterType="cn.crabapples.test.entity.SysUser">
				<selectKey keyProperty="id" order="AFTER" resultType="java.lang.String">
						SELECT LAST_INSERT_ID()
				</selectKey>
				insert into sys_user (age, name, password,
				status, username, role, mail,
				last_modified_by, phone, roles_list
				)
				values (#{age,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR},
				#{status,jdbcType=BIT}, #{username,jdbcType=VARCHAR}, #{role,jdbcType=BIT}, #{mail,jdbcType=VARCHAR},
				#{lastModifiedBy,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, #{rolesList,jdbcType=LONGVARCHAR}
				)
		</insert>
		<insert id="insertSelective" parameterType="cn.crabapples.test.entity.SysUser">
				<selectKey keyProperty="id" order="AFTER" resultType="java.lang.String">
						SELECT LAST_INSERT_ID()
				</selectKey>
				insert into sys_user
				<trim prefix="(" suffix=")" suffixOverrides=",">
						<if test="age != null">
								age,
						</if>
						<if test="name != null">
								name,
						</if>
						<if test="password != null">
								password,
						</if>
						<if test="status != null">
								status,
						</if>
						<if test="username != null">
								username,
						</if>
						<if test="role != null">
								role,
						</if>
						<if test="mail != null">
								mail,
						</if>
						<if test="lastModifiedBy != null">
								last_modified_by,
						</if>
						<if test="phone != null">
								phone,
						</if>
						<if test="rolesList != null">
								roles_list,
						</if>
				</trim>
				<trim prefix="values (" suffix=")" suffixOverrides=",">
						<if test="age != null">
								#{age,jdbcType=INTEGER},
						</if>
						<if test="name != null">
								#{name,jdbcType=VARCHAR},
						</if>
						<if test="password != null">
								#{password,jdbcType=VARCHAR},
						</if>
						<if test="status != null">
								#{status,jdbcType=BIT},
						</if>
						<if test="username != null">
								#{username,jdbcType=VARCHAR},
						</if>
						<if test="role != null">
								#{role,jdbcType=BIT},
						</if>
						<if test="mail != null">
								#{mail,jdbcType=VARCHAR},
						</if>
						<if test="lastModifiedBy != null">
								#{lastModifiedBy,jdbcType=VARCHAR},
						</if>
						<if test="phone != null">
								#{phone,jdbcType=VARCHAR},
						</if>
						<if test="rolesList != null">
								#{rolesList,jdbcType=LONGVARCHAR},
						</if>
				</trim>
		</insert>
		<update id="updateByPrimaryKeySelective" parameterType="cn.crabapples.test.entity.SysUser">
				update sys_user
				<set>
						<if test="age != null">
								age = #{age,jdbcType=INTEGER},
						</if>
						<if test="name != null">
								name = #{name,jdbcType=VARCHAR},
						</if>
						<if test="password != null">
								password = #{password,jdbcType=VARCHAR},
						</if>
						<if test="status != null">
								status = #{status,jdbcType=BIT},
						</if>
						<if test="username != null">
								username = #{username,jdbcType=VARCHAR},
						</if>
						<if test="role != null">
								role = #{role,jdbcType=BIT},
						</if>
						<if test="mail != null">
								mail = #{mail,jdbcType=VARCHAR},
						</if>
						<if test="lastModifiedBy != null">
								last_modified_by = #{lastModifiedBy,jdbcType=VARCHAR},
						</if>
						<if test="phone != null">
								phone = #{phone,jdbcType=VARCHAR},
						</if>
						<if test="rolesList != null">
								roles_list = #{rolesList,jdbcType=LONGVARCHAR},
						</if>
				</set>
				where id = #{id,jdbcType=VARCHAR}
		</update>
		<update id="updateByPrimaryKeyWithBLOBs" parameterType="cn.crabapples.test.entity.SysUser">
				update sys_user
				set age              = #{age,jdbcType=INTEGER},
				    name             = #{name,jdbcType=VARCHAR},
				    password         = #{password,jdbcType=VARCHAR},
				    status           = #{status,jdbcType=BIT},
				    username         = #{username,jdbcType=VARCHAR},
				    role             = #{role,jdbcType=BIT},
				    mail             = #{mail,jdbcType=VARCHAR},
				    last_modified_by = #{lastModifiedBy,jdbcType=VARCHAR},
				    phone            = #{phone,jdbcType=VARCHAR},
				    roles_list       = #{rolesList,jdbcType=LONGVARCHAR}
				where id = #{id,jdbcType=VARCHAR}
		</update>
		<update id="updateByPrimaryKey" parameterType="cn.crabapples.test.entity.SysUser">
				update sys_user
				set age              = #{age,jdbcType=INTEGER},
				    name             = #{name,jdbcType=VARCHAR},
				    password         = #{password,jdbcType=VARCHAR},
				    status           = #{status,jdbcType=BIT},
				    username         = #{username,jdbcType=VARCHAR},
				    role             = #{role,jdbcType=BIT},
				    mail             = #{mail,jdbcType=VARCHAR},
				    last_modified_by = #{lastModifiedBy,jdbcType=VARCHAR},
				    phone            = #{phone,jdbcType=VARCHAR}
				where id = #{id,jdbcType=VARCHAR}
		</update>
</mapper>
